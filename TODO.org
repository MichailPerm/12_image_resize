# TODO image_resize.py:101 # есть же функция валидации аргументов, почему это не там?
# TODO так же в той функции лучше использовать parser.error для ошибок, ведь это ошибка входящих аргументов. так же не обрабатывается случай, если аргументы не передали.
# TODO if args.width and args.height # это сообщение нужно показывать только если меняются пропорции изображения, а не всегда, когда передали оба параметра.
# TODO get_size_from_source_img # не совсем понятно, зачем эта функция и зачем превращать размеры в словарь, ведь гораздо удобнее сразу же распаковать их:
# TODO width, height = source_img.size — всё, даже функция не понадобилась.
# TODO compute_result_size(source_size, args) # сейчас не ясно, что значит args в контексте функции. это список? или словарь?
# TODO какие там должны быть ключи? передавай аргументы явно, это гораздо удобней.
# TODO source_img_dirs, source_img_name = os.path.split(args.filepath) # почему dirs, если это один каталог.
# TODO source_img_name_part, source_img_ext_part = os.path.split(source_img_name) # для этого есть os.path.splitext.
# TODO if not getattr(args, 'output') # этого никогда не произойдёт. аргументы, которые не указали, есть в парсере и имеют значение None, если не указано другое (например default).
# TODO Иногда форматирование удовлетворяет PEP8, но всё равно не помогает c читаемостью и унификацией. Почитай наш гайд по форматированию. (image_resize.py:47-59)
# TODO Строки, хорошо подготовленные к выводу в файл/консоль/шаблон плохо годятся для обработки и наращивания логики.
# TODO На такой случай полезно иметь под рукой исходные данные, а форматирование вывода откладывать до последнего момента.
# TODO (image_resize.py:93 # эту строку можно сформировать непосредственно перед выводом. путь к файлу есть в resized image атрибутах)